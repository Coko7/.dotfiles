" .ideavimrc - Matt Chapman


"" Base Settings
"" ========================================================

set scrolloff=8
set relativenumber
set number
set showmode
set showcmd

" set ignorecase

set commentary
" set idearefactormode=keep

set smartcase

set incsearch
set hlsearch

set visualbell

" Use system clipboard
set clipboard+=unnamed   

let mapleader = " "

"" Plugin Settings
"" ========================================================

set highlightedyank
set nerdtree

" Easymotion settings
set notimeout

" Which-key settings
set which-key
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_leader = "<leader> Leader key"

"" Key mappings
"" ========================================================

" inoremap jk <Esc>

" Clear hl search on <Esc> in normal mode
nnoremap <Esc> :nohlsearch<CR>

" Tab navigation
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>

" Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

" Jump between methods
" nnoremap [[ <Action>(MethodUp)
" nnoremap ]] <Action>(MethodDown)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" " Execute macro saved in 'q' register
" nnoremap qj @q
"
" " Popup navigation
" inoremap <C-j> <Action>(PopupMenu-selectNext)
" inoremap <C-k> <Action>(PopupMenu-selectPrev)


"" Leader commands
"" ========================================================

" Comment lines
" map <leader>c <action>(CommentByLineComment)

" Jump around with easymotion
" map <leader>j <Plug>(easymotion-s)

" Open NERDTree (use q to exit)
let g:WhichKeyDesc_leader = "<leader>pv Open [P]roject [V]iew"
map <leader>pv :NERDTreeToggle<CR>

" ---------------------------------------------------------------------------------

" Folding
let g:WhichKeyDesc_fold = "<leader>z Folding"

let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
map <leader>zc :action CollapseAllRegions<CR>

let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"
map <leader>zo :action ExpandAllRegions<CR>

" ---------------------------------------------------------------------------------

" Window splits

" let g:WhichKeyDesc_window = "<leader>w Window splits"
" let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
" let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
" let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
" let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"

" map <leader>wv <Action>(SplitVertically)
" map <leader>ws <Action>(SplitHorizontally)
" map <leader>wu <Action>(Unsplit)
" map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

" ---------------------------------------------------------------------------------

" Display options
let g:WhichKeyDesc_display = "<leader>d Display options"

let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
map <leader>dd <Action>(ToggleDistractionFreeMode)

let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
map <leader>dz <Action>(ToggleZenMode)

let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"
map <leader>df <Action>(ToggleFullScreen)

" ---------------------------------------------------------------------------------

" Actions
let g:WhichKeyDesc_action= "<leader>a Actions"

let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
map <leader>am <Action>(ShowIntentionActions)

let g:WhichKeyDesc_action_search = "<leader>as Open command modal"
map <leader>as <Action>(SearchEverywhere)

" ---------------------------------------------------------------------------------

" Search
let g:WhichKeyDesc_search_nav = "<leader>s [S]earch"

" let g:WhichKeyDesc_file_nav_show_recent_files = "<leader><leader>[ ] find existing buffers"
let g:WhichKeyDesc_file_quickLook = "<leader>s. [S]earch Recent files"
map <leader>s. <Action>(RecentFiles)

let g:WhichKeyDesc_file_nav_goto_content = "<leader>s/ [S]earch [/] in Open Files"
map <leader>s/ <Action>(FindInPath)

let g:WhichKeyDesc_file_nav_goto_file = "<leader>sf [S]earch [F]iles"
map <leader>sf <Action>(GotoFile)

let g:WhichKeyDesc_file_show_help = "<leader>sh [S]earch [H]elp"
map <leader>sh <Action>(HelpMenu)

" map <leader>fl          <Action>(RecentLocations)
" map <leader>fs          <Action>(NewScratchFile)

" ---------------------------------------------------------------------------------

" Close active tab
let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"
map <leader>q <Action>(CloseContent)

" ---------------------------------------------------------------------------------

" Refactoring
let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"

let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
map <leader>rn <Action>(RenameElement)

let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
map <leader>rm <Action>(ExtractMethod)

let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
map <leader>rv <Action>(IntroduceVariable)

let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
map <leader>rf <Action>(IntroduceField)

let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
map <leader>rs <Action>(ChangeSignature)

let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" ---------------------------------------------------------------------------------

" Goto definitions
let g:WhichKeyDesc_goto_def = "<leader>g Goto menu"

let g:WhichKeyDesc_goto_declaration = "<leader>gd [G]oto [D]efinition"
nmap <leader>gd <Action>(GotoDeclaration)

" let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
" nmap <leader>gy <Action>(GotoTypeDeclaration)

let g:WhichKeyDesc_goto_implementation = "<leader>gI [G]oto [I]mplementation"
nmap <leader>gI <Action>(GotoImplementation)

let g:WhichKeyDesc_goto_usages = "<leader>gr [G]oto [R]eferences"
nmap <leader>gr <Action>(ShowUsages)

let g:WhichKeyDesc_goto_test = "<leader>gt [G]oto [T]est"
nmap <leader>gt <Action>(GotoTest)

let g:WhichKeyDesc_goto_back = "<leader>gb [G]o [B]ack"
nmap <leader>gb <Action>(Back)

let g:WhichKeyDesc_goto_forward = "<leader>gf [G]o [F]orward"
nmap <leader>gf <Action>(Forward)

" ---------------------------------------------------------------------------------

" let g:WhichKeyDesc_git = "<leader>g Git operations"
" let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit dialog"
" let g:WhichKeyDesc_git_status = "<leader>gs Open Git status dialog"
" let g:WhichKeyDesc_git_branches = "<leader>gb Open Git branches list"

" Git windows
" map <leader>gc <Action>(CheckinProject)
" map <leader>gs <Action>(ActivateVersionControlToolWindow)
" map <leader>gb <Action>(Git.Branches)

" ---------------------------------------------------------------------------------

" Errors
let g:WhichKeyDesc_errors = "<leader>e Error navigation"

let g:WhichKeyDesc_errors_next = "<leader>en Go to [N]ext [E]rror in solution"
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)

let g:WhichKeyDesc_errors_prev = "<leader>ep Go to [P]revious [E]rror in solution"
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)
